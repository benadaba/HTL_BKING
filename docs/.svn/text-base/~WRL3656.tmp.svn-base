CHOICES.TXT

General Issues (4)
general Data Access Issues (3)
Locking API Issues (3)
Database File Format Specification Issues (9)
User Interface issues (4)
Sockets vs. RMI choice
Other Networking Issues (2)

Hotel Room Booking Application Table of Contents
	1	    Design Decisions
	1.1	    Design Decisions Summary
	1.2	    Modifying Versus Extending the Supplied Classes
	1.3	    Locking API Issues (3)	
      1.4	    RMI Versus Sockets Communication
	1.5	    DatabaseRemote Implements All Public Methods of the Database Class
	1.6	    Search Function
	1.7	    Single Interface for Both Remote and Local Network Modes
	1.8	    User Interface Designed for Ease of Use
	1.9	    Coding Standards and Readability
	1.10	Clarity and Maintainability
	1.11	Documentation
	1.12	Exception Handling and Error Testing
	2	    Design Patterns Used 
	2.1	    Client Tier 
	2.1.1	Model-View-Controller Pattern
	2.1.2	Business Delegate Pattern
	2.1.3	Value Objects Pattern
	2.1.4	Connection Factory Pattern
	2.2	    Server Tier
	2.2.1	Data Access Objects Pattern
	2.2.2	Decorator Pattern


general Data Access Issues (3)
DB package 
- The serialVersionUID

I declared this value manually. This will ensure consistency in the value during serialization and deserialization even after slight changes in the HotelRoom class. Because if i had allowed the compiler to generate it automatically the serialVersionUID value would change any time there is a slight modification in the HotelRoom class. This will make my modified classes incompatible with the original class during deserialization resulting in an invalidClassException exception being thrown.




HotelRoom class

All fields are declared as String including the size, rate and date 

Reason/advantage 
It gives uniformity, and ease of management particularly when the variables are stored as a (*String array).

There are no setter methods for name, location, smoking, rate, size, date variables because there are no places in the application where the client is going to set these variables. These variables and their values are already created and established in the database file, hence we are only to read and get these values. So only getter methods are provided for these variables in the HotelRoom class.

The only variable whose value our client has the opportunity to set is the owner (ownerId) that is during the booking process.
Hence the appropriate setter method is provided for it.

Hence during the construction of a hotel room object, all the appropriate values are obtained from the database file and the client is only allowed to set the owner (ownerId) value when they are booking for the record.

The advantages is that, it makes the code simple 
2) It reserves a lot of memory and space.

Also in the HotelRoom class, there are constants which are used as indexes when the HotelRoom object is converted to an (String) array and its field values are being accessed.


The class has two methods
a) getTitle(), which gets the fields title as string separated by commas and 
b) getFields() method which gets the fields’ values of this hotel room object separated by comma.
These methods are called in various parts of the application specifically the getTitle() method is called in the ApplicationWindow class whenever a new HotelRoomTableModel is been instantiated.

advantages of these static fields and these methods are.
1) they make the code cleaner as one would not have to be coding all these fields one after the other in all parts of the application.
2) they make it simpler to maintain the code because if there is any change necessary we just change the source, that is, these methods and fields without having to break our other parts of the code.


Disadvantage
1) increases coupling, hence if the HotelRoom class becomes non-existent again , the other parts  of our code which call these methods  and constants would break.


Again, the HotelRoom class overrides class Object's equals and hashCode methods which are used to make comparisons during the booking process.
That is to determine if a room selected to be booked is equal to a room in the database file by comparing all the field values with the exception of the owner field because that has no value assigned to in the file. 



A) Used a Hash Map to store the list of locked records.
 The map stores the record numbers as keys and the associated records as values
The HashMap is declared static, to allow all instances to have, access and update one common map.


Advantages
1) HashMap grows dynamically when more items are added to it and it shrinks dynamically as well when items are removed from it.
2) Any key and value at any index in the HashMap can be unsequentially accessed at any time. Hence when a record’s key is known it is straight forward to get that record any point in time without having to start searching in the map from the first object. 
3)  A HashMap is not synchronized and hence faster. For instance it is faster than hashtable since the latter has synchronized methods.
2) HashMap allows null both as a key and a value. For instance, Hashtable does not.
3) Repopulating a HashMap offsets the performance gained by avoiding synchronized accessor methods.)
4) Effectively, the HashMap is immutable. This allows multiple get operations to run in parallel, which can be a major performance boost




Disadvantages

Alternative approaches
1) ArrayList

Advantages 
a) Gives random access 
b) Fast iteration


Disadvantages
a) Does not give a key value pair for holding the record number and the related record which would not be conducive then for the purpose of my design.
b) There is slow performance because of its synchronised methods


2) Hashtable
Another collection class that could have been used is Hashtable
a) It works the same as a HashMap except that it has a performance hit because of its synchronized methods. 
b) And also it does not accept anything that is null as in the case of a key or value.



DATA CLASS

Data class implements DBAccess, the interface supplied in the assignment. I created two private methods offset() and writeBytes() which made it very easy to manage the database file. This helps to overcome some limitations of the methods given by Sun 
The former method calculates the offset of a record in the database file for writing or reading of that record.
Whiles the latter performs the writing of bytes' operations to the database file by taking String values and converting them to bytes by writing into the appropriate record number location


2) I programmed to an interface whenever an instance of Data was needed. Specifically in the LocalClient class when the handle to the DBAccess was been instantiated in the class’ constructor.
   
Advantages of coding to an interface

1) Coding to an interface gives flexibility and easy maintainability of code in the future because in the future any subclass that implements the DBAccess can be implemented straight away without having to change a lot of code.


RandomAccessFile is used to read and write to the database file because it makes convenient and easy to access the database file from different offsets randomly that means in any sequence.
This variable is declared static to let all threads accessing the database file do so through a common RandomAccessFile

Advantages  
1) It allows the database file to be opened for read and/or write at the same time.
2) In comparison to sequential access files, it saves significant amount of disk space required by the file
3) With RandomAccessFile once the database is opened, it can be read from or written to in a random manner just by using a record number 
4) You can even add to the end of the file since you will know how many records are in the file. 
5) RandomAccessFile takes advantages of particular behaviours that are not found in normal I/O devices
  With RandomAccessFile, you can seek to any desired location in the file then read and/or write the desired amount of data.


The disadvantage however is that
1) you can have wasted space if many fields in the records are left blank or if most of the strings stored in the record are significantly shorter than the length dimensioned for the string.
2) Also they are not especially transportable.

3) You have to manually, arithmetically calculate the position in the file you want to read or write to and seek it with the seek method of the RandomAccessFile.
  

Other alternative 
Other I/O devices like BufferedInputStream, BufferedOutputStream, FileInputStream and FileOutStream could have been used. 
However, the main disadvantage is that they will not offer you random access to any position of choice in the database file.

 
Locking API Issues

Used ReentrantLock with the ReentrantReadWriteLock and Condition classes

Advantages
1) It offers far better performance under heavy contention. 
  (In other words, when many threads are attempting to access a shared resource, the JVM will spend less time scheduling threads and more time executing them). 
This means that when many threads are all contending for the same lock, the total throughput is generally going to be better with ReentrantLock than with synchronized
3) It can do everything synchronized does, has the same memory and concurrency semantics
4) Lock objects have the ability to back out of an attempt to acquire a lock unlike implicit locks. (Though this feature is not used in my implementation)



Other alternative
The other alternative would have been normal synchronization with monitor methods and statements.

Advantages
1) Synchronization requires that locks be released in the same stack frame in which they were acquired, which most of the time is the right thing 
2) It interacts nicely with exception handling
3) For one, it is impossible to forget to release a lock when using synchronization; the JVM does that for you when you exit the synchronized block.


Disadvantages
Synchronization is good, but not perfect.
1) It is not possible to interrupt a thread that is waiting to acquire a lock,
2) It is not possible to poll for a lock or attempt to acquire a lock without being willing to wait forever for it.



 METHODS 
   Delete() 
A record is unlocked before it is deleted. Thus the unlock method is called first from within the delete method before a delete takes place. Because if the client does not have the legitimate right to the right cookie (the generated cookie from the lockRecord() method), they cannot unlock that record, which will throw a SecurityException, let alone deleting it.
   
The deleteRecord() method seeks the start of the record to be deleted and writes deleted at the start of the position. 
It can be enhanced in the future though.

Advantages of this approach
  1) All the other records maintain their same locational numbers in the database, hence reference to them by such numbers is maintained and made easier for all database management.
   
2) It is an easier and straight forward approach.

  Other means by which it could have been done
I could have deleted the entire record with all its fields and the next record aligned to occupy the locational space as well as the locational number of the deleted record, in the database.

Advantages of this approach 
    1) Creates more space.

Disadvantages
     2) Rewriting of records to back to the database to align with locational positions may cumbersome and bugs prone. This will be a bit difficult for the junior programmer to be able to implement.

 readRecord() method
An inner class is created to assist in converting from the one large byte[] into multiple String[] - one String per field. It was an inner class because that class is used for that sole purpose and used only in 
that method.


updateRecord() method
In the updateRecord() method, a record is unlocked before it is updated. Thus the unlockRecord() method is called first from within the updateRecord() method before an update takes place. It is done this way, because if the client does not have the legitimate right to the right cookie, they cannot unlock that record, which will throw a SecurityException, let alone updating it.




findByCriteria method.
I used ArrayList to hold internally, the record numbers of the found record numbers from the search.
Reasons/advantages of using ArrayList are;
1) It gives fast iteration
2) Fast random access

createRecord() method
If -1 is returned from the createRecord() method, it means that there was no new data inserted to be created so there was no need to go ahead to create and empty record. The database is read to find a space marked deleted then a new record is created in that position. When the end of file is reached without finding a deleted entry, the new record is written to the end of the database file.

lockRecord() method
I used System.currentTimeMillis() multiplied by new Random().nextLong() to generate the cookie that results from locking a record. The code is like this:  
long cookie = System.currentTimeMillis()*new Random().nextLong();

The reasons for using System.currentTimeMillis() 
Advantages
1) It is native 
2) Its resolution (or granularity) depends on the underlying Operating System. 
3) It generally has a very fast response time 
4) The method signature is not synchronized but the implementation usually is 

Disadvantages

Other alternatives are using
1) System.nanoTime()  and 
2) the current Threads ID.



unlockRecord() method
If record number is not in the HashMap (that is, it is not locked) or the record number is not associated with the correct cookie then a SecurityException is thrown.




DBClient
An interface which is called by the Client when searching or booking for hotel rooms.
It provides methods which will be called in the GUI in either of the running modes; either through the server or local connection.

Made this an interface for various reasons (refer to DB in general).



The getHotelRoomsByCriteria() method in the DBClient returns  an Object[][]  which contains Hotel rooms in the form of String array. The JTable in the view uses Objects in its rows and columns hence it makes it straight forward when a search returns the results in Object array to be used by the HotelRoomTableModel.


All the methods in the DBClient throw IOExceptions.

Reasons and advantages
1) When running in networked mode and the server is disconnected, then this Exception will be thrown and it will be propagated to further throw the RemoteException in the Application ???


LocalClient 

It implements DBClient 
It has a private method called loadRecords() which converts a String from the Data class into hotel room objects and store them in a map. The room objects are retrieved and cached through the constructor for later re-use as the application starts and runs. 

If there is no database file passed into the constructor to load to application then there is no need to continue running the application so the Application exits.
This is not expected to happen, anyway, because the client is forced to select the database file when starting the mode in which to run the application.



RECORD CACHE AGAINST WRITING TO THE FILE DIRECTLY
Records are cached into a HashMap the first time they are loaded in the LocalClient before being presented to the view. Records are then accessed and managed from the cache and updating the physical database file appropriately.

 Advantages
  1) It prevents the tedious process of always writing and reading directly from the physical database file on each operation hence less tedious operations.
  2) It helps minimise such probable problems as IOExceptions in the reading and writing directly to the file.
 3) It is relatively a cleaner and efficient process than working directly with the database file on each operation.
4) Caching gives a quicker access to the records

Disadvantages
1) It is a bit complex and might require a little bit of hardwork
but not so hard to the extent that the junior programmer would not comprehend.
2) There is a probability of inconsistencies in data if not well implemented.
3) There is also a possibility of receiving out of date data if not well implemented.


Other alternative
Could have written and read directly to the database file on each single operation.

Advantages
 I would not have to write back to the file after all the operations are complete since each single operations deals directly with the file and keeps it updated in time.  

Disadvantages
a)   Very tedious process
b) There would be the challenge of constantly having to deal with IOExceptions which might not be desirable.



IN DB IN GENERAL
The Data and LocalClient class are programmed to interfaces, DBAccess, and DBClient respectively.


Data class implements DBAccess directly.
It is good to programme to an interface, in  that

DBClient client = new LocalClient(String dbPath);



Advantages
1. You could later change your code, that is if there is any subclass of Data or LocalClient or any other class that also implements DBAccess or DBClient they can be changed in place of where the Data or DBClient reference is found and this will not break the code, unlike when it is being implemented to a concrete class
example Data data = new Data() or
LocalClient client = new LocalClient() 
in the future if the implemented interface changes then then this implementation could break.


2. An interface gives you more abstraction, and makes the code more flexible and resilient to changes, because you can use different implementations of the same interface without changing its client. Program thus becomes implementation-independent.

3 Easy Maintenance

4. Reusable Code, Plug-Compatible
When you use an interface, you lower the bar to potential class interactions, and hence reusability. 

5 Compilation Efficiency
Programming to an interfaces helps in large projects.  In case you implemented to concrete classes and you changed one of the method signatures of LocalClient, all the code that calls that method has to be recompiled too. But if you use the DBClient interface, and don’t change the interface, changing just the interface implementation classes,
LocalClient,  nothing need be recompiled on all codes that call these methods, so long as those classes accessed the methods via the DBClient interface name rather than specific class name(LocalClient).


Disadvantages
1) You can’t specify static methods in the interface. All interface methods are instance methods.
  Hence if any implementing class needs a static method then it will have to declare their own static methods.



RecordNotFoundException
It is declared public because it is being thrown at the server too????



The 48 hour Rule.





GUI 
User Interface Designed for Ease of Use
The user interface is designed for ease of use following good Human/Computer Interaction (HCI) principles. 
For example, the user simply clicks on Games to select one for reservation. 
Also, the search feature is easy, with drop-down combo boxes to select stadium seats to search. 
It accomplishes this with Swing components, especially the JTable. 
It also uses menu bars, buttons, and tool tips set in a JSplitPane for a user-friendly window look and feel. 
There are other helpful features, such as table sorting. 
The user can sort the entire table by clicking on any column heading. 
The main interface uses the BorderLayout, with the status bar and connection bar in the south part. 
The left side of the main JSplitPane is another JSplitPane, which includes a reservation area in the upper 
part and a search panel in the lower part. 
The right side of the main JSplitPane is the main data output section of the user interface, which is the JTable. 
The BorderLayout is the main layout manager because it makes it easy to position components proportionately
and it handles window resizes.


JTable -  It is appropriate to show ownerIds cos tis the only way the CSRs would know about them. For the clients, they
            already know about them.


GENERAL ACHITECTURE
MVC pattern is used in design.

Model = database file.

Data class is responsible for extracting the information stored in the datafile in the form of bytes and converting it to
 a String.
        -It is also responsible for converting String into bytes in inputing them into the database file in the way it is 
          stored in the datafile.


Contoller = DBClients(LocalClient)
         - Responsible for converting the String obtained from the Data class into HotelRoom objects and carrying the information
      to the GUI.
         _ It is also responsible for taking information from the GUI in the form of HotelRoom objects and converting them into 
         String and sending it to the Data Class which in turn converts it to bytes and use it to look into the database for 
      for the required information
     - The controller is the logic of the application.
     -makes sure what what is passed to the Data class and for that matter the database file is in the right format.
       and what ever is presented to the GUI is in the right format.
     
     >>>>>>>More.

View = GUI (JTable)


Factory Pattern 
  - used in the RemoteConnector

All numberings start with zero.
- this follows java numbering standards 
hence the first record in the database file is numbered 0 and the second is numbered 1 and the third 2 and so on...


ALONEOPTIONDIALOG
  - made the alone selection dialog run in a separate window.
  advantagesagesagess.
    1) makes a neat coding
    2) makes it distinct.

 -- used GroupLayout to arrange items in the window.
  advantagesagesagess
    disadvantages.

Other layouts i could have used are
   1) borderlayout
 disadvantages. 1) sizing of the window demands extra codes.



APPLICATIONWINDOW 
 - the DBClient reference passed into the constructor of the Application allows the appropriate instance of the running
   mode, either networked or non networked to used to instantiate the internal reference to the DBClient.

  >>> In the actionPerformed method of the ExitApplication Inner class, the JOptionPane is used ask the user if they 
   actually wants to close the application when the click exit from the file menu.

advantages. It might have been a mistake through which the user clicked the exit item, given them such a question helps to cancel
 the exit and continue with their searches and bookings.
   Or user might have a second thought of doing something again after clicking exit. Giving them this option allows them to 
   get back to the application without having to exit and run the application all again.

 >>>In the searchRooms method when a search is done a new HotelRoomTableModel is created to get data from search result
 and the application's internal table's model is set to new HotelRoomTableModel.
 In this sense, old table model will eventually become eligible for garbage collection and it will be garbage collected 
 when the garbage collector runs.
 ---reasons, advantages,  disadvantages, and other alternatives.

USER INSTRUCTIONS  
 Read and display from the GUI in addition to it being put inside the docs directory.
- Read using the HotelRoomBookingApplicationInstruction class.

Other approaches. 
1)could have put online as HTML file.

advantages of displaying in GUI.
 - makes it more handy,
  - user friendly
  - professional
  - easily accessible and run with application.


Advantages of having put it online as HTML file would have been wide accessible by many users.
The big disadvantage is where there is no internet connection, accessibility would be a problem.////???? IS IT TRUE?


HOTELROOMBOOKINGAPPLICATION CLASS. 

 - Uses FileInputStream to read the file

advantages and  disadvantages
>>> what other option could have been used.
advantages and  disadvantages.

  2) Displays text in JTextArea set in a ScrollPane.

 Advantages: 1) Easy to read and it is clear.
             2) Easy to manage as Scroll Bar makes it easier to scroll up and down instructions.????

Disadvantages

Could have used JDialog to display instructions but the instructions are too long which will result in a 
rather huge dialogue making the gui too clumsy.
 

HOTELROOMTABLEMODEL
 >>> Pass the hotel room objects as object array into the constructor of this class.
 >>> the title of the room objects' field values as also passed into the constructor as String arrays.

advantages. 
  >>> takes the implementation of the Object  and String arrays from the HotelRoomTableModel class.
   2) 
 disadvantages.

>>> other approaches.
1)	Could have made invoked the getHotelRoomByCriteria to initialise the Object arra(data) for the 
    TableModel to use.

dusadvantage. 
  1) dilutes the exact function of the class as being a TableModel by adding extra functionalities.


OWNERIDDIALOG
1) extended a JDialog

  advantages
  a) It is either you book or don't hence there would not be any need to minimize the window as it would have been 
the possible case if a JFrame was extended. 

2)` Used a separate window to accept owner ID and book selected room from the table.

advantages 
   1) This more convenient and professional
   2)

other approach
  1) Could have let user enter the ID from the table.

Disadvantages 
 1) The booking activity would have been clumsied with the other items on the table.

3) Uses a JFormattedTextField to accept owner ID inputted by the user.
   With the aid of MaskFormatter to specify valid and number of individual inputs into the textFields.
 
 advantages
 1) No need for manually validating/verifying of inputs into textfield.
 2) 

 disadvantages
 1)

other options .
-- could have used JTextField
  disadvantages. 
    1) Would have done the validation of the inputs to the textfield manually.
    2) this is quite tedious

bookRoom method.

  >> Whenever a booking activity is processed a new  HotelRoomTableModel instance is created and the table's model is 
   set to the new  HotelRoomTableModel instance created. This makes the old  HotelRoomTableModel eligible for garbage 
   collection and would be garbage collected appropriately.

Why that way.
advantages and  disadvantages.   
   This new creation does not however happen when the client is disconnected from the server when running in networked mode


SERVER 
 >>> chose RMI over Sockets for the following reasons.

It consists of 2 classes, RemoteServices and RemoteServicesImpl. RemoteServices is an interface that extends Services and Remote. It has no body. This is possible because all the Services methods throw IOException and can therefore also throw a RemoteException. It's a nice trick that keeps things simple.

RMI
1)Object-based semantics – Remote objects look and feel just like local objects. The complexities of network-aware objects can be hidden from the programs using RMI remote objects.

2) No protocol burden – Unlike sockets, when working with RMI  there is no need to worry about designing a protocol between the client and server, a process that is error – prone.

3) Method calls are type-safe in RMI – RMI is more strongly typed than sockets. Errors can be caught at compile time.

4) It is easy to add new objects with RMI or extend the protocol – You can more easily add new remote objects interfaces or add methods to  an existing remote object.

5) RMI is an abstraction on sockets where the client makes what appears to be a local call, when actually the invocation results in a message being sent across the network, to a different JVM.

6) In contrast to sockets, RMI communicates both data and action, in the form of a method or a procedural instruction. Sockets are the actual underlying mechanism used in RMI. 

7) So simple compared to using sockets 

1.4 RMI Versus Sockets Communication
In the remote connection mode, I use a proxy pattern to design the socket connection. The DatabaseRemote_Stub class is the proxy for the client side. I chose RMI over sockets communication for the following reasons:
	* Thread safety is built into RMI, whereas in sockets, multithreading issues need to be addressed.
	* Sockets need a communication protocol that has to be custom defined, but RMI has RMP built in.
	* RMI presents a simpler programming model over sockets.
	* RMI supports dynamic class loading.
	* RMI gives more scope for scalability. New objects can easily be introduced without requiring changes to the communication protocol.
	* The socket technology is the foundation on which RMI is built, but RMI is more mature and using it is much simpler.
	* RMI is a better standard, so it would be easy for other developers to understand the design for future development.
	* Because remote objects appear local, method calls are completely type-safe.
	* The Registry acts as a central lookup for finding various remote objects.

Disadvantages
1) There is communication overhead involved when using RMI, and that is due to lookups in the RMI registry and client stubs or proxies that make remote invocations transparent. For each RMI remote object, there is a need for a proxy, which slows the performance down.

Sockets
Advantages
1) Sockets are faster than RMI
2)  Socket implementation involves threading. 

Disadvantages (check on the internet)
Socket based communications allows only to send packets of raw data between applications. Both the client-side and server-side have to provide mechanisms to make the data useful in any way.

Disadvantages of Java Sockets:
Security restrictions are sometimes overbearing because a Java applet running in a Web browser is only able to establish connections to the machine where it came from, and to nowhere else on the network 
Despite all of the useful and helpful Java features, Socket based communications allows only to send packets of raw data between applications. Both the client-side and server-side have to provide mechanisms to make the data useful in any way. 
Since the data formats and protocols remain application specific, the re-use of socket based implementations is limited.


How the Server Works
The process in which the server works is illustrated in Figure.... below.
The ApplicationRunner calls the getRemote() utility method on the RemoteConnector, which then calls the getClient() method on the RemoteDatabaseFactoryImpl. The RemoteDatabaseFactoryImpl then calls the constructor to an implementation of the DBClient, which in turns calls the constructor of an implementation of the DBAccess.
In effect, a DBClient implementation instance is returned to the ApplicationRunner and this instance is passed into the constructor of the 
ApllicationWindow to start the main window of the application.

In the process of booking a room, this what happens.
From the ApplicationWindow, a new thread is spawn which runs the OwnerIDDialog object. In this instance, the bookHotelRoom() is called on the DBClient client instance. Then the readRecord() method is called on the implementation of the DBAccess (Data). This is followed by a call to the lockRecord() method which is followed by a call to the updateRecord() all on the implementation of the DBAccess (Data).
When the bookHotelRoom() returns in the OwnerIDDialog class, then getHotelRoomsByCriteria() method is called on the DBClient client instance. The  returned Object[][] array is used to create a new HotelRoomTableModel and this is set as the new table model of the ApplicationWindow class in which case the previous one is discarded and made available for garbage collection.

During search.....???







1)General Assumptions
 48 hour rule

It is a business rule for booking hotel rooms only within 48 hours of the start of room occupancy.
From the assignment requirements it is not a must to implement this 48 hour rule in the application and since it is not a must requirement and also it is not clear from the instructions whether or not this rule should be implemented I decided not to implement it in my application.

However, it is assumed that the Customer Service Representatives would know the dates that the customers or clients would want to book a hotel room and they will check if this date is feasible by the 48 hour rule, and then tell the prospective clients through the telephone whether or not the booking will be accepted. 
I justified that I did not implement that rule because it was not clear whether I had to implement it or not, so since it was not explicit, I decided not to implement it. (Roberto)

I thought about the 48 hour rule thing. From the CSR view, they need to know the client's date before they can decide if it's reasonable to continue (eg within 48 hours). Of course all this is indeed with the telephone and not with the GUI/program. So I personally think it's ok to ignore this. (K. Tsang)






RMI Server Port
Assumed that the  default RMI port (1099) will be used.
Hostname is “localhost”. No other port for now.
Generating Stub (a must requirement)- should be implemented!!!


DESIGN PATTERNS USED
MVC
The Data class is responsible for extracting information from the database file in the format that is presented in the file and converting it to String. 
It is also responsible for inputting back into the database file String information by converting is to bytes and putting into the database file just as the same way information are stored in it.

The DBClient’s implementation that is the LocalClient is the Controller. 
It is responsible for transporting information from the model to the GUI (View) to be displayed in a way that the user interacting with the system will understand. The controller converts String information obtain from the Data class into a HotelRoom object or Object[][](is it String or object[][]) and presented to the view.

View(GUI)
Takes the object[][] which contains hotel room object information and displays it in a view (table) that is understandable to the user.

FACTORY PATTERN
ABSTRACT FACTORY
SINGLETON IN LOGGER


